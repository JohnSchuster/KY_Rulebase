//JQuery UI implementation of a searching combobox
(function( jQuery ) {
    jQuery.widget( "ui.combobox", {
        _create: function() {
            var self = this,
                customStyles = this.element.context.style.cssText,
                select = this.element.hide(),
                selected = select.children( ":selected" ),
                options = select.children("option"),
                value = selected.val() ? selected.text() : "",
                defaultOpt = options[0],
                optToItem = function(opt, searchTerm){
                    return {
                        label: opt.text.replace(
                            new RegExp(
                                "(?![^&;]+;)(?!<[^<>]*)(" +
                                jQuery.ui.autocomplete.escapeRegex(searchTerm) +
                                ")(?![^<>]*>)(?![^&;]+;)", "gi"
                            ), "<strong>$1</strong>" ),
                        value: opt.text,
                        option: opt
                    }
                };

            var ctrlSpan = jQuery("<span style=\"white-space:nowrap\"></span>")
                .insertAfter(select);

            var input = this.input = jQuery( "<input>" )
                .appendTo( ctrlSpan )
                .val( value )
                .autocomplete({
                    delay: 0,
                    minLength: 0,
                    source: function( request, response ) {
                        var maxResults = ${max-search-results};
                        var startMatches = new Array();
                        var containsMatches = new Array();
                        
                        var search = !request.term ? "" : request.term.toLowerCase();

                        var truncResults = false;
                        for(var i = 0; i < options.length; ++i){
                            var opt = options[i];
                            var idx = opt.text.toLowerCase().indexOf(search);
                            if(idx == 0){
                                if(maxResults > 0 && startMatches.length >= maxResults){
                                    truncResults = true;
                                    break;
                                }
                                startMatches.push(optToItem(opt, request.term));
                            } else if(idx > 0){
                                  containsMatches.push(optToItem(opt, request.term));
                            }

                        }                            

                        if(maxResults <= 0 || startMatches.length + containsMatches.length <= maxResults){
                            startMatches = startMatches.concat(containsMatches);
                        } else if(startMatches.length < maxResults){
                            truncResults = true;
                            var end = maxResults - startMatches.length;
                            for(var i = 0; i < end; ++i){
                                startMatches.push(containsMatches[i]);
                            }
                        }
    
                        if(truncResults){
                            startMatches.push({
                                label: "<strong>${searching-combo-more-results}</strong>",
                                value: "___MAX___"
                            })
                        }                        
                        
                        response(
                            startMatches
                        );
                    },
                    select: function( event, ui ) {
                        if( ui.item.value == "___MAX___")
                            return false;
                        
                        ui.item.option.selected = true;
                        #if (${warn-unsubmitted-pages} == "true" || ${warn-unsubmitted-pages} == "True")
                            owdMakeDirty();
                        #end
                        self._trigger( "selected", event, {
                            item: ui.item.option
                        });
                    },
                    change: function( event, ui ) {
                        if ( !ui.item ) {
                            var displayText = jQuery(this).val();
                            var valid = false;
                            for(var i = 0; i < options.length; ++i){
                                var opt = options[i];
                                var match = (opt.text === displayText);
                                if(match){
                                    opt.selected = true;
                                    valid = true;
                                    selected = opt;
                                    break;
                                }
                            }

                            if ( !valid ) {
                                // remove invalid value, as it didn't match anything
                                defaultOpt.selected = true;
                                jQuery(input).val(defaultOpt.text);
                                input.data( "autocomplete" ).term = defaultOpt.text;
                                return false;
                            }
                        }
                        //unsumbitted data warning
                        #if (${warn-unsubmitted-pages} == "true" || ${warn-unsubmitted-pages} == "True")
                            if(input.data("autocomplete").isSubmitting !== true)
                                owdMakeDirty();
                        #end
                    },
                    focus: function(event, ui){
                        if( ui.item.value == "___MAX___")
                            return false;
                    }
                })
                .addClass( "ui-widget ui-widget-content" )

            var selectId = select.attr("id");
            input.attr("id", "___cmbinput___" + selectId);

            input.data( "autocomplete" )._renderItem = function( ul, item ) {
                return jQuery( "<li></li>" )
                    .data( "item.autocomplete", item )
                    .append( "<a>" + item.label + "</a>" )
                    .appendTo( ul );
            };

            //set tab index
            input.attr("tabindex", select.attr("tabindex"));

            //change label association
            var lbl = jQuery('label[for="' + selectId + '"]');
            if(lbl){
                lbl.attr("for", input.attr("id"));
            }


            var button = this.button = jQuery( "<button type='button'>&nbsp;</button>" )
                .attr( "tabIndex", -1 )
                .attr("title", "${searching-combo-trigger-tooltip}")
                .insertAfter( input )
                .button({
                    icons: {
                        primary: "ui-icon-triangle-1-s"
                    },
                    text: false
                })
                .removeClass( "ui-corner-all" )
                .click(function() {
                    // close if already visible
                    if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
                        input.autocomplete( "close" );
                        return;
                    }

                    jQuery( this ).blur();

                    // pass empty string as value to search for, displaying all results
                    input.autocomplete( "search", "" );
                    input.focus();
                });
        
            if(this.element.context.disabled){
                this.input.attr('disabled', 'disabled');
                this.button.attr('disabled', 'disabled');
                
                this.input.removeClass("ui-state-default");
                this.button.removeClass("ui-state-default");
                
                this.input.addClass("ui-state-disabled");
                this.button.removeClass("ui-state-default");
            } else {
                //If there is a blank value in the list, make it the default
                for(var i = 0; i < options.length; ++i){
                    var opt = options[i];
                    if(opt.value === ""){
                        defaultOpt = opt;
                        break;
                    }
                }
            }

            //apply custom classes and styles
            var classes = select.context.className.split(' ');
            for(var i = 0; i < classes.length; ++i){
                if(classes[i] === "num-list"){
                    input.addClass("searching-combo-number");
                } else if(classes[i] && classes[i] !== "owd-input"){
                    input.addClass(classes[i]);
                    input.data("autocomplete").menu.element.addClass(classes[i]);
                    button.addClass(classes[i]);
                }
            }

            if(customStyles){
                var styles = customStyles.split(';');
                for(var i = 0; i < styles.length; ++ i){
                    var s = styles[i].split(':');
                    if(s && s.length == 2){
                        var key = jQuery.trim(s[0]);
                        var val = jQuery.trim(s[1]);
                        input.css(key, val);
                        input.data("autocomplete").menu.element.css(key, val);
                        button.css(key, val);
                    }
                }
            }


        },

        destroy: function() {
            this.input.remove();
            this.button.remove();
            this.element.show();
            jQuery.Widget.prototype.destroy.call( this );
        }
    });
})( jQuery );

var searchingCombos = new Array();
//make all dropdowns searching comboboxes
jQuery(function() {
    //explicitly disable for opera
    if(!jQuery.browser.opera){
        var selects = document.getElementsByTagName("select");
        for(i = 0; i < selects.length; ++i){
            var input = selects[i];

            //make sure it is actually a dropdown and not a listbox
            if( !(input.size) || input.size < 2 ){
               var jQueryId = "#" + input.id;
               var combo = jQuery(jQueryId).combobox();
               searchingCombos.push("#___cmbinput___" + input.id);
            }
        }

        //validate all combobox option on submit
        if(searchingCombos.length > 0){
            jQuery("#owdInterviewForm").submit(function(){
                for(var i = 0; i < searchingCombos.length; ++i){
                    var comboData = jQuery(searchingCombos[i]).data("autocomplete");
                    comboData.isSubmitting = true;
                    comboData._change();
                }
            });
        }
    }
});
    
